#! /bin/bash

# bash-session
# bash session management functions.

# Copyright (C) 2017 Stephen L Jones <sljones@slohj.org>
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# TODO:
#
# ! set session dependent histories.
# ! shopt nad set -o stuff
# ! turn off the session with $ bsess ""
# ! move PROMPT_COMMAND to bsess()
#
# ! Use trap EXIT to save all session info.
#
# * Look into overloading the builtin help to provide help information for user
#   functions and aliases.
#
# ? what about readline stuff?
#

# Global variables
declare -g _bs_name

# Public functions

# Display current session name and/or saved session names or set the current
# session name, loading the session if it already had been saved.
bsess ()
{
    # Error check, there should be only 0 or one parameters.
    if [[ -n "${2}" ]]
    then
        # FIXME:
        # Error message needed: bad usage!
        return 1
    fi

    if [[ -z "${1}" ]]
    then
        # Print the current session if it has already been set.
        if [[ -n "${_bs_name}" ]]
        then
            printf 'Current session: %s\n\n' "${_bs_name}"
        fi

        # Save the current state of nullglob.
        globsetting="$(shopt -p nullglob)"
        shopt -s nullglob

        # Display list of available sessions.
        printf 'Saved sessions:\n'
        for file_session in ${HOME}/.bash_session_*
        do
            session="${file_session#*.bash_session_}"
            printf '\t%s\n' "${session}"
        done

        # Restore the original state of nullglob.
        ${globsetting}
    else
        _bs_name="${1}"
        # Source the session file if it exists.
        if [[ -f "${HOME}/.bash_session_${_bs_name}" ]]
        then
            . "${HOME}/.bash_session_${_bs_name}"
        else
            HISTFILE="${HOME}/.bash_history_${_bs_name}"
        fi
    fi
}

# Write out the session information do disk.
bsave ()
{
    declare sess_file
    if [[ -v _bs_name ]]
    then
        sess_file="${HOME}/.bash_session_${_bs_name}"
    else
        sess_file="session_test"
    fi

    # Initialize the session file.
    printf "#! /bin/bash\n\n" > "${sess_file}"
    printf "# bash session file %s\n" "${sess_file}" >> "${sess_file}"

    # Set the list of default variables to be saved.
    declare def_vars
    def_vars="BASH_LOADABLES_PATH:BASH_TRACEFD:CDPATH:CHILD_MAX:EDITOR"
    def_vars+=":EXECIGNORE:FCEDIT:FIGNORE:FUNCNEST:GLOGIGNORE:HISTCONTROL"
    def_vars+=":HISTFILE:HISTFILESIZE:HISTIGNORE:HISTSIZE:HISTTIMEFORMAT"
    def_vars+=":HOSTFILE:IGNOREEOF:INPUTRC:LANG:LC_ALL:LC_COLLATE"
    def_vars+=":LC_CTYPE:LC_MESSAGES:LC_NUMERIC:LC_TIME:MAIL:MAILCHECK"
    def_vars+=":MAILPATH:PATH:POSIXLY_CORRECT:PS0:PS1:PS2:PS4:TIMEFORMAT"
    def_vars+=":TMOUT:TMPDIR:histchars"

    printf "\n# Setting default variables.\n" >> "${sess_file}"
    _bs_vars_set "${def_vars}" >> "${sess_file}"

    # Build the list of default variables to be unset
    declare def_unset
    declare tmp_list="${def_vars}:"
    while [[ -n "${tmp_list}" ]]
    do
        if [[ ! -v "${tmp_list%%:*}" ]]
        then
            def_unset+="${tmp_list%%:*}:"
        fi
        tmp_list="${tmp_list#*:}"
    done
    printf "\n# Unset default variables.\n" >> "${sess_file}"
    _bs_vars_unset "${def_unset%:}" >> "${sess_file}"

    # Save the directory stack.
    printf "\n# Directory stack.\n" >> "${sess_file}"
    printf "dirs -c\n" >> "${sess_file}"
    printd  >> "${sess_file}"
    printf "popd > /dev/null\n" >> "${sess_file}"

    printf "\n# source the extra file\n" >> "${sess_file}"
    printf "if [[ -f %s ]]\nthen\n" "${sess_file}_extra" >> "${sess_file}"
    printf "    . %s\nfi\n" "${sess_file}_extra" >> "${sess_file}"
}

# Print the dirstack to stdout in a reusable format.
printd ()
{
    local ind

    for (( ind = -1 ; ind >= 0 - ${#DIRSTACK[@]} ; ind-- ))
    do
        # FIXME:
        # bash currently does not properly expand the ~ in the array.
        # This has been fixed in bash development but has not been released as
        # an official patch yet, so we need to still use the string replacement.
        #printf "pushd -n %q > /dev/null\n" "${DIRSTACK[${ind}]}"
        printf "pushd -n %q > /dev/null\n" "${DIRSTACK[${ind}]/#\~/${HOME}}"
    done
}

# Private functions

# This function is used by PROMPT_COMMAND to set both the command line prompt
# and the xterm title.
_bs_set_stitle ()
{
    if [[ -n ${_bs_name} ]]
    then
        stitle="${_bs_name} "
        if [[ -v DISPLAY ]]
        then
            echo -ne "\033]0;${_bs_name}\007"
        fi
    else
        stitle=""
    fi
}

# Split out a colon separated list of variables printing out the declare
# invocation to stdout.
_bs_vars_set ()
{
    declare parselist

    if [[ -z "${1}" ]]
    then
        return 1
    fi

    parselist="${1}:"

    while [[ -n "${parselist}" ]]
    do
        if [[ -v "${parselist%%:*}" ]]
        then
            declare -p "${parselist%%:*}"
        fi
        parselist=${parselist#*:}
    done
}

# Split out a colon separated list of variables printing the command to unset
# the variable to stdout.
_bs_vars_unset ()
{
    declare parselist

    if [[ -z "${1}" ]]
    then
        return 1
    fi

    parselist="${1}:"

    while [[ -n "${parselist}" ]]
    do
        printf "unset -v %s\n" "${parselist%%:*}"
        parselist=${parselist#*:}
    done
}

# Execute on load commands

# Set PROMPT_COMMAND
if [[ -v PROMPT_COMMAND ]]
then
    # The user is already using PROMPT_COMMAND for something else, so just turn
    # it into a compound command.
    PROMPT_COMMAND="${PROMPT_COMMAND}; _bs_set_stitle"
else
    PROMPT_COMMAND="_bs_set_stitle"
fi

# Vim mode line {{{1
# vim: expandtab softtabstop=4 shiftwidth=4 filetype=sh:
